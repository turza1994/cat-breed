{"version":3,"sources":["serviceWorker.js","robots.js","Card.js","CardList.js","Searchbox.js","ColorPicker.js","RandomColor.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","className","src","alt","CardList","cardComp","map","user","i","key","Searchbox","onSearchChange","this","props","searchChange","type","placeholder","onChange","Component","ColorPicker","onColorChange","color","value","RandomColor","onClickRandomColor","onClick","style","background","height","width","margin","Scroll","overflowY","border","children","App","state","color1","color2","bind","onColorChange1","onColorChange2","fetch","then","response","json","setState","e","target","filteredRobot","length","toLowerCase","includes","push","console","log","r1","Math","floor","random","g1","b1","r2","g2","b2","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9f82c35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email})=>{\r\n    \r\n        return(\r\n            <div className=\"bg-near-white dib br3 pa3 ma3 grow bw-4 shadow-5 tc\">\r\n                <img src={`https://robohash.org/${id}?size=200x200`} alt='robo friend'></img>\r\n                <h3>Name: {name} </h3>\r\n                <p>email: {email} </p>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nimport React from 'react';\r\n\r\nconst CardList = ({robots})=>{\r\n    // const cardComp = ()=>{\r\n    //     var arr = [];\r\n    //     for(var i=0; i<10; i++){\r\n    //         arr.push(<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />);\r\n    //     }\r\n    //     return arr;\r\n    // }\r\n    let cardComp = robots.map((user, i) => {\r\n            return (\r\n                <Card\r\n                    key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    email={robots[i].email}\r\n                />\r\n                );\r\n            })\r\n    return(\r\n        <div className='CardList ph5'>\r\n            { cardComp }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass Searchbox extends Component{\r\n    render(){\r\n        let onSearchChange = this.props.searchChange;\r\n        return(\r\n            <div>\r\n                <input \r\n                className=\"input-reset ba b--black-20 pa2 mb2 w-30 tc\"\r\n                type = \"search\"\r\n                placeholder=\"Search for robots\"\r\n                onChange={onSearchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst ColorPicker = ({onColorChange, color})=>{\r\n    return(\r\n        <input type='color' onChange={onColorChange} value={color} />\r\n    );\r\n}\r\n\r\nexport default ColorPicker;","import React from 'react';\r\n\r\nconst RandomColor = ({onClickRandomColor})=>{\r\n    return(\r\n        <input type='button' value='Random color' onClick={onClickRandomColor} style={{background:\"#3DB724\", color:'white', height: '3vh', width: '19vh', margin: '2vh 0 0 3vh'}}  />\r\n    );\r\n}\r\n\r\nexport default RandomColor;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div className=\"mt2\" style={{ overflowY: 'scroll', height: '800px', border: '1px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import {robots} from'./robots';\r\nimport CardList from './CardList';\r\nimport Searchbox from './Searchbox';\r\nimport ColorPicker from './ColorPicker';\r\nimport RandomColor from './RandomColor';\r\nimport Scroll from './Scroll';\r\nimport './App.css';\r\n\r\nimport React, { Component } from 'react';\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            color1: '#ff3300',\r\n            color2: '#ffac4d'\r\n        }\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n        this.onColorChange1 = this.onColorChange1.bind(this);\r\n        this.onColorChange2 = this.onColorChange2.bind(this);\r\n        this.onClickRandomColor = this.onClickRandomColor.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(json => this.setState({robots:json}));\r\n    }\r\n\r\n    onSearchChange(e){\r\n        let name = e.target.value;\r\n        let filteredRobot = [];\r\n        for(let i=0; i<robots.length; i++){\r\n            if(robots[i].name.toLowerCase().includes(name.toLowerCase())){\r\n                filteredRobot.push(robots[i]);\r\n            }\r\n        }\r\n        console.log(filteredRobot);\r\n        this.setState({robots: filteredRobot});\r\n        \r\n    }\r\n\r\n    onColorChange1(e){\r\n        console.log(e.target.value);\r\n        this.setState({color1: e.target.value});\r\n    }\r\n    onColorChange2(e){\r\n        console.log(e.target.value);\r\n        this.setState({color2: e.target.value});\r\n    }\r\n\r\n    onClickRandomColor(e){\r\n        let r1 = Math.floor(Math.random()*255);\r\n        let g1 = Math.floor(Math.random()*255);\r\n        let b1 = Math.floor(Math.random()*255);\r\n        let r2 = Math.floor(Math.random()*255);\r\n        let g2 = Math.floor(Math.random()*255);\r\n        let b2 = Math.floor(Math.random()*255);\r\n        // console.log(randomNumber);\r\n        this.setState({\r\n            color1: `rgb(${r1}, ${g1}, ${b1})`,\r\n            color2: `rgb(${r2}, ${g2}, ${b2})`\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"App tc\" style={{background: `linear-gradient(to left, ${this.state.color1} , ${this.state.color2})`}} >\r\n                <header>\r\n                    <h1 className=\"f1 fw9 b\">Robo Friends</h1>\r\n                    <Searchbox searchChange = { this.onSearchChange } />\r\n                    <h3>Change Background Color ?</h3>\r\n                    <ColorPicker onColorChange = {this.onColorChange1} color = {this.state.color1} />\r\n                    <ColorPicker onColorChange = {this.onColorChange2} color = {this.state.color2} />\r\n                    <RandomColor onClickRandomColor = {this.onClickRandomColor} />\r\n                </header>\r\n                <Scroll>\r\n                    <CardList robots={this.state.robots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons/css/tachyons.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n        <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}